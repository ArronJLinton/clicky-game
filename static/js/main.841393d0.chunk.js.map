{"version":3,"sources":["components/title.js","components/card.js","components/score.js","components/guess.js","components/board.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Card","props","Object","assign","style","height","width","margin","Score","position","score","topScore","Guess","guess","correct","Board","randomize","arr","i","length","j","Math","floor","random","temp","updateCards","url","cards","_this","state","map","x","console","log","src","clicked","setState","handleChoice","event","target","dataset","randomizeImages","images","_this2","this","components_guess","card","components_card","alt","data-clicked","key","onClick","Component","App","title","board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.841393d0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Title() {\n\n    return (\n        <div className={\"row\"}>\n            <div className={\"col s12 blue lighten-1\"}>\n                <div className={\"row center\"}>\n                    <h1>Clicky Game!</h1>\n                    <h5>Click on  an image to earn points, but don't click on any more than once!</h5>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Title\n\n","import React from 'react';\n\nfunction Card(props) {\n    return(<img style={{height:200, width:200, margin:6.5}} {...props}/>);\n//    TODO: Add data-clicked to default as false\n};\n\nexport default Card\n\n","import React from 'react';\n\nfunction Score(props) {\n\n    return(<p className={props.position}>Score:{props.score} | Top Score:{props.topScore}</p> );\n};\n\nexport default Score\n\n","import React from 'react';\n\nfunction Guess(props) {\n\n    let guess = props.correct ? \"You guessed correct!\" : \"Sorry, you guessed wrong\"\n    return(<p className={props.position}>{guess}</p> );\n};\n\nexport default Guess\n\n","import React, {Component} from 'react';\nimport Card from \"./card\";\nimport Score from \"./score\";\nimport Guess from \"./guess\";\n\nclass Board extends Component {\n\n    randomize = (arr) => {\n        for (let i = arr.length - 1; i > 0; i--){\n            let j = Math.floor(Math.random() * (i+1));\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    };\n\n    updateCards = (url) => {\n        let cards = this.state.cards.map(x=>x);\n        for (let i = 0; i < cards.length; i++) {\n            console.log(url)\n            console.log(cards[i].src)\n            if(url === cards[i].src) {\n                console.log(cards[i])\n                cards[i].clicked = true\n                console.log(cards[i])\n            }\n        }\n        let score = this.state.score + 1\n        let topScore = this.state.topScore\n        if (score > this.state.topScore) {\n            topScore = score\n        }\n        this.randomize(cards)\n        this.setState({\n            score: score,\n            cards: cards,\n            topScore: topScore\n        })\n    }\n\n    handleChoice= (event) => {\n        console.log(event.target.dataset.clicked)\n        if(event.target.dataset.clicked === \"false\") {\n            this.updateCards(event.target.src)\n        //    TODO: Play the game\n        } else {\n        //    TODO: Start a new instance of the game\n        }\n    }\n\n    randomizeImages = () => {\n        let images = [\n            {src: \"https://i.pinimg.com/564x/b2/71/a4/b271a401ea2305f35604581ee1f09dd6--rick-y-morty-rick-and-morty-portal.jpg\", clicked:false},\n            {src: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTz5FtQvvaalMjwwPs7aroO2N-Umq_dQoW6MpkIu6-n8Nh9rLIu\", clicked:false},\n            {src: \"https://images-na.ssl-images-amazon.com/images/I/61mv11Bd6vL.jpg\", clicked:false},\n            {src: \"https://images-na.ssl-images-amazon.com/images/I/81cXzPwn2qL.jpg\", clicked:false},\n            {src: \"https://colinsreview.files.wordpress.com/2017/12/rick-and-morty-the-ricks-must-be-crazy-square.jpg?w=720\", clicked:false},\n            {src: \"https://target.scene7.com/is/image/Target/GUEST_00aadfd4-45f4-4363-8044-874912610773?wid=488&hei=488&fmt=pjpeg\", clicked:false},\n            {src: \"https://spotlight.radiopublic.com/images/thumbnail?url=https%3A%2F%2Fmedia.podiant.co%2Fspoke%2Fcinescapemagazine%2Fartwork%2F5a22f6c59ae04.jpg\", clicked:false}\n        ];\n        this.randomize(images);\n        return images\n    };\n\n    state ={\n        cards: this.randomizeImages(),\n        score: 0,\n        topScore: 0\n    };\n\n    render() {\n    return (\n        <div>\n            <div className={\"row\"}>\n                <div className={\"col s12\"}>\n                    <Score score={this.state.score} topScore={this.state.topScore} position={\"center\"}/>  {/*TODO: score is current score, top is best yet*/}\n                    <Guess position={\"center\"} correct={false}/>  {/*TODO: Correct is a  boolean based on the guess*/}\n                </div>\n            </div>\n            <div className=\"row\">\n\n                <div className=\"col\">\n                    {this.state.cards.map((card, i) => <Card src={card.src} alt={\"Rick and Morty\"} data-clicked={card.clicked} key={i} onClick={this.handleChoice}/>)}\n                </div>\n            </div>\n        </div>\n    )};\n}\n\nexport default Board\n\n","import React from 'react';\nimport './App.css';\nimport Title from \"./components/title\";\nimport Board from \"./components/board\";\n\nfunction App() {\n  return (\n    <div className={\"container\"}>\n        <Title/>\n        <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}